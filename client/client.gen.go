// Package pokeapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Ability defines model for Ability.
type Ability struct {
	// The name of the ability.
	Name *string `json:"name,omitempty"`

	// The URL of the ability's details.
	Url *string `json:"url,omitempty"`
}

// AffectingMove defines model for AffectingMove.
type AffectingMove struct {
	// The change in the stat caused by the move.
	Change int  `json:"change"`
	Move   Move `json:"move"`
}

// AffectingNature defines model for AffectingNature.
type AffectingNature struct {
	// The change in the stat caused by the nature.
	Change int    `json:"change"`
	Nature Nature `json:"nature"`
}

// Characteristic defines model for Characteristic.
type Characteristic struct {
	// The URL of the characteristic's details.
	Url *string `json:"url,omitempty"`
}

// Flavor defines model for Flavor.
type Flavor struct {
	// The name of the flavor.
	Name *string `json:"name,omitempty"`

	// The URL of the flavor's details.
	Url *string `json:"url,omitempty"`
}

// Generation defines model for Generation.
type Generation struct {
	// The name of the generation.
	Name *string `json:"name,omitempty"`

	// The URL of the generation's details.
	Url *string `json:"url,omitempty"`
}

// Move defines model for Move.
type Move struct {
	// The name of the move.
	Name *string `json:"name,omitempty"`

	// The URL of the move's details.
	Url *string `json:"url,omitempty"`
}

// MoveBattleStyle defines model for MoveBattleStyle.
type MoveBattleStyle struct {
	// The name of the move battle style.
	Name *string `json:"name,omitempty"`

	// The URL of the move battle style's details.
	Url *string `json:"url,omitempty"`
}

// MoveDamageClass defines model for MoveDamageClass.
type MoveDamageClass struct {
	// The name of the move damage class.
	Name *string `json:"name,omitempty"`

	// The URL of the move damage class's details.
	Url *string `json:"url,omitempty"`
}

// MoveLearnMethod defines model for MoveLearnMethod.
type MoveLearnMethod struct {
	// The name of the move learn method.
	Name *string `json:"name,omitempty"`

	// The URL of the move learn method's details.
	Url *string `json:"url,omitempty"`
}

// Nature defines model for Nature.
type Nature struct {
	// The name of the nature.
	Name *string `json:"name,omitempty"`

	// The URL of the nature's details.
	Url *string `json:"url,omitempty"`
}

// NatureDetails defines model for NatureDetails.
type NatureDetails struct {
	DecreasedStat Stat   `json:"decreased_stat"`
	HatesFlavor   Flavor `json:"hates_flavor"`

	// The ID of the nature.
	Id            int    `json:"id"`
	IncreasedStat Stat   `json:"increased_stat"`
	LikesFlavor   Flavor `json:"likes_flavor"`

	// The move battle style preferences influenced by the nature.
	MoveBattleStylePreferences []struct {
		// The preference for a move under high HP conditions.
		HighHpPreference int `json:"high_hp_preference"`

		// The preference for a move under low HP conditions.
		LowHpPreference int             `json:"low_hp_preference"`
		MoveBattleStyle MoveBattleStyle `json:"move_battle_style"`
	} `json:"move_battle_style_preferences"`

	// The name of the nature.
	Name string `json:"name"`

	// The changes in Pokeathlon stats caused by the nature.
	PokeathlonStatChanges []struct {
		// The maximum amount of change in the Pokeathlon stat.
		MaxChange      int            `json:"max_change"`
		PokeathlonStat PokeathlonStat `json:"pokeathlon_stat"`
	} `json:"pokeathlon_stat_changes"`
}

// PokeathlonStat defines model for PokeathlonStat.
type PokeathlonStat struct {
	// The name of the Pokeathlon stat.
	Name *string `json:"name,omitempty"`

	// The URL of the Pokeathlon stat's details.
	Url *string `json:"url,omitempty"`
}

// PokemonDetails defines model for PokemonDetails.
type PokemonDetails struct {
	// The abilities of the Pokemon.
	Abilities *[]struct {
		Ability *Ability `json:"ability,omitempty"`

		// Indicates if the ability is hidden.
		IsHidden *bool `json:"is_hidden,omitempty"`

		// The slot number of the ability.
		Slot *int `json:"slot,omitempty"`
	} `json:"abilities,omitempty"`

	// The base experience gained when defeating the Pokemon.
	BaseExperience *int `json:"base_experience,omitempty"`

	// The forms of the Pokemon.
	Forms *[]PokemonForm `json:"forms,omitempty"`

	// The game indices of the Pokemon.
	GameIndices *[]struct {
		// The game index of the Pokemon.
		GameIndex int     `json:"game_index"`
		Version   Version `json:"version"`
	} `json:"game_indices,omitempty"`

	// The height of the Pokemon in decimetres.
	Height *int `json:"height,omitempty"`

	// The ID of the Pokemon.
	Id *int `json:"id,omitempty"`

	// Indicates if the Pokemon is the default form.
	IsDefault *bool `json:"is_default,omitempty"`

	// The URL for accessing the Pokemon's location area encounters.
	LocationAreaEncounters *string `json:"location_area_encounters,omitempty"`

	// The moves of the Pokemon.
	Moves *[]struct {
		Move struct {
			// The name of the move.
			Name string `json:"name"`

			// The URL of the move's details.
			Url string `json:"url"`
		} `json:"move"`
		VersionGroupDetails []struct {
			// The level at which the move is learned.
			LevelLearnedAt  int             `json:"level_learned_at"`
			MoveLearnMethod MoveLearnMethod `json:"move_learn_method"`
			VersionGroup    VersionGroup    `json:"version_group"`
		} `json:"version_group_details"`
	} `json:"moves,omitempty"`

	// The name of the Pokemon.
	Name *string `json:"name,omitempty"`

	// The order of the Pokemon.
	Order *int `json:"order,omitempty"`

	// The past types of the Pokemon.
	PastTypes *[]struct {
		Generation Generation `json:"generation"`
		Types      []struct {
			// The slot number of the type.
			Slot *int  `json:"slot,omitempty"`
			Type *Type `json:"type,omitempty"`
		} `json:"types"`
	} `json:"past_types,omitempty"`
	Sprites *SpriteImages `json:"sprites,omitempty"`

	// The stats of the Pokemon.
	Stats *[]struct {
		// The base stat value.
		BaseStat int `json:"base_stat"`

		// The effort points gained when defeating the Pokemon.
		Effort int  `json:"effort"`
		Stat   Stat `json:"stat"`
	} `json:"stats,omitempty"`

	// The types of the Pokemon.
	Types *[]struct {
		// The slot number of the type.
		Slot int  `json:"slot"`
		Type Type `json:"type"`
	} `json:"types,omitempty"`

	// The weight of the Pokemon in hectograms.
	Weight *int `json:"weight,omitempty"`
}

// PokemonForm defines model for PokemonForm.
type PokemonForm struct {
	// The name of the Pokemon form.
	Name *string `json:"name,omitempty"`

	// The URL of the Pokemon form's details.
	Url *string `json:"url,omitempty"`
}

// SpriteImages defines model for SpriteImages.
type SpriteImages struct {
	// The URL of the default back sprite image.
	BackDefault *string `json:"back_default,omitempty"`

	// The URL of the female back sprite image.
	BackFemale *string `json:"back_female,omitempty"`

	// The URL of the shiny back sprite image.
	BackShiny *string `json:"back_shiny,omitempty"`

	// The URL of the shiny female back sprite image.
	BackShinyFemale *string `json:"back_shiny_female,omitempty"`

	// The URL of the default front sprite image.
	FrontDefault string `json:"front_default"`

	// The URL of the female front sprite image.
	FrontFemale *string `json:"front_female,omitempty"`

	// The URL of the shiny front sprite image.
	FrontShiny *string `json:"front_shiny,omitempty"`

	// The URL of the shiny female front sprite image.
	FrontShinyFemale *string `json:"front_shiny_female,omitempty"`
	Other            *struct {
		DreamWorld struct {
			// The URL of the dream world front sprite image.
			FrontDefault string `json:"front_default"`

			// The URL of the dream world female front sprite image.
			FrontFemale *string `json:"front_female,omitempty"`
		} `json:"dream_world"`
		Home struct {
			// The URL of the home front sprite image.
			FrontDefault string `json:"front_default"`

			// The URL of the home female front sprite image.
			FrontFemale *string `json:"front_female,omitempty"`

			// The URL of the shiny home front sprite image.
			FrontShiny *string `json:"front_shiny,omitempty"`

			// The URL of the shiny home female front sprite image.
			FrontShinyFemale *string `json:"front_shiny_female,omitempty"`
		} `json:"home"`
		OfficialArtwork struct {
			// The URL of the official artwork front sprite image.
			FrontDefault string `json:"front_default"`

			// The URL of the shiny official artwork front sprite image.
			FrontShiny *string `json:"front_shiny,omitempty"`
		} `json:"official_artwork"`
	} `json:"other,omitempty"`
}

// Stat defines model for Stat.
type Stat struct {
	// The name of the stat.
	Name *string `json:"name,omitempty"`

	// The URL of the stat's details.
	Url *string `json:"url,omitempty"`
}

// StatAffectingMoves defines model for StatAffectingMoves.
type StatAffectingMoves struct {
	// The moves that decrease the stat.
	Decrease []AffectingMove `json:"decrease"`

	// The moves that increase the stat.
	Increase []AffectingMove `json:"increase"`
}

// StatAffectingNatures defines model for StatAffectingNatures.
type StatAffectingNatures struct {
	// The natures that decrease the stat.
	Decrease []AffectingNature `json:"decrease"`

	// The natures that increase the stat.
	Increase []AffectingNature `json:"increase"`
}

// StatDetails defines model for StatDetails.
type StatDetails struct {
	AffectingMoves   StatAffectingMoves   `json:"affecting_moves"`
	AffectingNatures StatAffectingNatures `json:"affecting_natures"`

	// The characteristics related to the stat.
	Characteristics []Characteristic `json:"characteristics"`

	// The game index of the stat.
	GameIndex int `json:"game_index"`

	// The ID of the stat.
	Id int `json:"id"`

	// Indicates if the stat is only used in battles.
	IsBattleOnly    bool            `json:"is_battle_only"`
	MoveDamageClass MoveDamageClass `json:"move_damage_class"`

	// The name of the stat.
	Name string `json:"name"`
}

// Type defines model for Type.
type Type struct {
	// The name of the Pokemon type.
	Name *string `json:"name,omitempty"`

	// The URL of the type's details.
	Url *string `json:"url,omitempty"`
}

// Version defines model for Version.
type Version struct {
	// The name of the version.
	Name *string `json:"name,omitempty"`

	// The URL of the version's details.
	Url *string `json:"url,omitempty"`
}

// VersionGroup defines model for VersionGroup.
type VersionGroup struct {
	// The name of the version group.
	Name *string `json:"name,omitempty"`

	// The URL of the version group's details.
	Url *string `json:"url,omitempty"`
}

// IdPathParam defines model for IdPathParam.
type IdPathParam int

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNatureDetails request
	GetNatureDetails(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPokemonDetails request
	GetPokemonDetails(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatDetails request
	GetStatDetails(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNatureDetails(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNatureDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPokemonDetails(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPokemonDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatDetails(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNatureDetailsRequest generates requests for GetNatureDetails
func NewGetNatureDetailsRequest(server string, id IdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nature/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPokemonDetailsRequest generates requests for GetPokemonDetails
func NewGetPokemonDetailsRequest(server string, id IdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pokemon/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatDetailsRequest generates requests for GetStatDetails
func NewGetStatDetailsRequest(server string, id IdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNatureDetails request
	GetNatureDetailsWithResponse(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*GetNatureDetailsResponse, error)

	// GetPokemonDetails request
	GetPokemonDetailsWithResponse(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*GetPokemonDetailsResponse, error)

	// GetStatDetails request
	GetStatDetailsWithResponse(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*GetStatDetailsResponse, error)
}

type GetNatureDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NatureDetails
}

// Status returns HTTPResponse.Status
func (r GetNatureDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNatureDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPokemonDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PokemonDetails
}

// Status returns HTTPResponse.Status
func (r GetPokemonDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPokemonDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatDetails
}

// Status returns HTTPResponse.Status
func (r GetStatDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNatureDetailsWithResponse request returning *GetNatureDetailsResponse
func (c *ClientWithResponses) GetNatureDetailsWithResponse(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*GetNatureDetailsResponse, error) {
	rsp, err := c.GetNatureDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNatureDetailsResponse(rsp)
}

// GetPokemonDetailsWithResponse request returning *GetPokemonDetailsResponse
func (c *ClientWithResponses) GetPokemonDetailsWithResponse(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*GetPokemonDetailsResponse, error) {
	rsp, err := c.GetPokemonDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPokemonDetailsResponse(rsp)
}

// GetStatDetailsWithResponse request returning *GetStatDetailsResponse
func (c *ClientWithResponses) GetStatDetailsWithResponse(ctx context.Context, id IdPathParam, reqEditors ...RequestEditorFn) (*GetStatDetailsResponse, error) {
	rsp, err := c.GetStatDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatDetailsResponse(rsp)
}

// ParseGetNatureDetailsResponse parses an HTTP response from a GetNatureDetailsWithResponse call
func ParseGetNatureDetailsResponse(rsp *http.Response) (*GetNatureDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNatureDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NatureDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPokemonDetailsResponse parses an HTTP response from a GetPokemonDetailsWithResponse call
func ParseGetPokemonDetailsResponse(rsp *http.Response) (*GetPokemonDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPokemonDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PokemonDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatDetailsResponse parses an HTTP response from a GetStatDetailsWithResponse call
func ParseGetStatDetailsResponse(rsp *http.Response) (*GetStatDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Nature Details by ID
	// (GET /nature/{id})
	GetNatureDetails(ctx echo.Context, id IdPathParam) error
	// Get Pokemon Details by ID or Name
	// (GET /pokemon/{id}/)
	GetPokemonDetails(ctx echo.Context, id IdPathParam) error
	// Get Stat Details
	// (GET /stat/{id})
	GetStatDetails(ctx echo.Context, id IdPathParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetNatureDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetNatureDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNatureDetails(ctx, id)
	return err
}

// GetPokemonDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPokemonDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPokemonDetails(ctx, id)
	return err
}

// GetStatDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatDetails(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/nature/:id", wrapper.GetNatureDetails)
	router.GET(baseURL+"/pokemon/:id/", wrapper.GetPokemonDetails)
	router.GET(baseURL+"/stat/:id", wrapper.GetStatDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BVckuj8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

