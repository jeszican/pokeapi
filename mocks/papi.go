// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.gen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/jeszican/pokeapi/client"
	v4 "github.com/labstack/echo/v4"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetNatureDetails mocks base method.
func (m *MockClientInterface) GetNatureDetails(ctx context.Context, id client.IdPathParam, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNatureDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNatureDetails indicates an expected call of GetNatureDetails.
func (mr *MockClientInterfaceMockRecorder) GetNatureDetails(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNatureDetails", reflect.TypeOf((*MockClientInterface)(nil).GetNatureDetails), varargs...)
}

// GetPokemonDetails mocks base method.
func (m *MockClientInterface) GetPokemonDetails(ctx context.Context, id client.IdPathParam, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPokemonDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonDetails indicates an expected call of GetPokemonDetails.
func (mr *MockClientInterfaceMockRecorder) GetPokemonDetails(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonDetails", reflect.TypeOf((*MockClientInterface)(nil).GetPokemonDetails), varargs...)
}

// GetStatDetails mocks base method.
func (m *MockClientInterface) GetStatDetails(ctx context.Context, id client.IdPathParam, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatDetails", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatDetails indicates an expected call of GetStatDetails.
func (mr *MockClientInterfaceMockRecorder) GetStatDetails(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatDetails", reflect.TypeOf((*MockClientInterface)(nil).GetStatDetails), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetNatureDetailsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetNatureDetailsWithResponse(ctx context.Context, id client.IdPathParam, reqEditors ...client.RequestEditorFn) (*client.GetNatureDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNatureDetailsWithResponse", varargs...)
	ret0, _ := ret[0].(*client.GetNatureDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNatureDetailsWithResponse indicates an expected call of GetNatureDetailsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetNatureDetailsWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNatureDetailsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetNatureDetailsWithResponse), varargs...)
}

// GetPokemonDetailsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetPokemonDetailsWithResponse(ctx context.Context, id client.IdPathParam, reqEditors ...client.RequestEditorFn) (*client.GetPokemonDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPokemonDetailsWithResponse", varargs...)
	ret0, _ := ret[0].(*client.GetPokemonDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonDetailsWithResponse indicates an expected call of GetPokemonDetailsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetPokemonDetailsWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonDetailsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetPokemonDetailsWithResponse), varargs...)
}

// GetStatDetailsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetStatDetailsWithResponse(ctx context.Context, id client.IdPathParam, reqEditors ...client.RequestEditorFn) (*client.GetStatDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatDetailsWithResponse", varargs...)
	ret0, _ := ret[0].(*client.GetStatDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatDetailsWithResponse indicates an expected call of GetStatDetailsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetStatDetailsWithResponse(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatDetailsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetStatDetailsWithResponse), varargs...)
}

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// GetNatureDetails mocks base method.
func (m *MockServerInterface) GetNatureDetails(ctx v4.Context, id client.IdPathParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNatureDetails", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNatureDetails indicates an expected call of GetNatureDetails.
func (mr *MockServerInterfaceMockRecorder) GetNatureDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNatureDetails", reflect.TypeOf((*MockServerInterface)(nil).GetNatureDetails), ctx, id)
}

// GetPokemonDetails mocks base method.
func (m *MockServerInterface) GetPokemonDetails(ctx v4.Context, id client.IdPathParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonDetails", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPokemonDetails indicates an expected call of GetPokemonDetails.
func (mr *MockServerInterfaceMockRecorder) GetPokemonDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonDetails", reflect.TypeOf((*MockServerInterface)(nil).GetPokemonDetails), ctx, id)
}

// GetStatDetails mocks base method.
func (m *MockServerInterface) GetStatDetails(ctx v4.Context, id client.IdPathParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatDetails", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStatDetails indicates an expected call of GetStatDetails.
func (mr *MockServerInterfaceMockRecorder) GetStatDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatDetails", reflect.TypeOf((*MockServerInterface)(nil).GetStatDetails), ctx, id)
}

// MockEchoRouter is a mock of EchoRouter interface.
type MockEchoRouter struct {
	ctrl     *gomock.Controller
	recorder *MockEchoRouterMockRecorder
}

// MockEchoRouterMockRecorder is the mock recorder for MockEchoRouter.
type MockEchoRouterMockRecorder struct {
	mock *MockEchoRouter
}

// NewMockEchoRouter creates a new mock instance.
func NewMockEchoRouter(ctrl *gomock.Controller) *MockEchoRouter {
	mock := &MockEchoRouter{ctrl: ctrl}
	mock.recorder = &MockEchoRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoRouter) EXPECT() *MockEchoRouterMockRecorder {
	return m.recorder
}

// CONNECT mocks base method.
func (m_2 *MockEchoRouter) CONNECT(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "CONNECT", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// CONNECT indicates an expected call of CONNECT.
func (mr *MockEchoRouterMockRecorder) CONNECT(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CONNECT", reflect.TypeOf((*MockEchoRouter)(nil).CONNECT), varargs...)
}

// DELETE mocks base method.
func (m_2 *MockEchoRouter) DELETE(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "DELETE", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockEchoRouterMockRecorder) DELETE(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockEchoRouter)(nil).DELETE), varargs...)
}

// GET mocks base method.
func (m_2 *MockEchoRouter) GET(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "GET", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// GET indicates an expected call of GET.
func (mr *MockEchoRouterMockRecorder) GET(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockEchoRouter)(nil).GET), varargs...)
}

// HEAD mocks base method.
func (m_2 *MockEchoRouter) HEAD(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "HEAD", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// HEAD indicates an expected call of HEAD.
func (mr *MockEchoRouterMockRecorder) HEAD(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HEAD", reflect.TypeOf((*MockEchoRouter)(nil).HEAD), varargs...)
}

// OPTIONS mocks base method.
func (m_2 *MockEchoRouter) OPTIONS(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "OPTIONS", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS.
func (mr *MockEchoRouterMockRecorder) OPTIONS(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockEchoRouter)(nil).OPTIONS), varargs...)
}

// PATCH mocks base method.
func (m_2 *MockEchoRouter) PATCH(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "PATCH", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// PATCH indicates an expected call of PATCH.
func (mr *MockEchoRouterMockRecorder) PATCH(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockEchoRouter)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m_2 *MockEchoRouter) POST(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "POST", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// POST indicates an expected call of POST.
func (mr *MockEchoRouterMockRecorder) POST(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockEchoRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m_2 *MockEchoRouter) PUT(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "PUT", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockEchoRouterMockRecorder) PUT(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockEchoRouter)(nil).PUT), varargs...)
}

// TRACE mocks base method.
func (m_2 *MockEchoRouter) TRACE(path string, h v4.HandlerFunc, m ...v4.MiddlewareFunc) *v4.Route {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "TRACE", varargs...)
	ret0, _ := ret[0].(*v4.Route)
	return ret0
}

// TRACE indicates an expected call of TRACE.
func (mr *MockEchoRouterMockRecorder) TRACE(path, h interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRACE", reflect.TypeOf((*MockEchoRouter)(nil).TRACE), varargs...)
}
